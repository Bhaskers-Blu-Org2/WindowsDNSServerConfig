#---------------------------------#
#      environment configuration  #
#---------------------------------#
version: 1.0.{build}.0
environment:
  AppID:
    secure: IJBqnB6WjtDi3ej/zy2D70Ry1AvJOrlZK5BhSoqEdxNENd0CL9qdMJndbi6p+di3
  AppPass:
    secure: b8lT719n/ll0Bp5SloBvzw==
  Tenant:
    secure: J/my7xsOE9jewR0DDhD+EU5jeo5Bp83/nmIK8a8QI0QLoZXStCOtk1vUjVsKylW2
install:
  - git clone https://github.com/Microsoft/WindowsDNSServer.Config
  - git clone https://github.com/PowerShell/DscResource.Tests
  - ps: |
        Import-Module -Name .\DscResource.Tests\TestHelper.psm1 -Force
        Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.205 -Force | Out-Null
        Install-Module -Name Pester -Repository PSGallery -Force
        #Install-Module -Name AzureRM -Repository PSGallery -Force
        
#---------------------------------#
#      build configuration        #
#---------------------------------#

build: false

#---------------------------------#
#      test configuration         #
#---------------------------------#

test_script:
    - ps: |
        # Suppressing tests until configuration test helper is created
        # $testResultsFile = ".\TestsResults.xml"
        # $res = Invoke-Pester -OutputFormat NUnitXml -OutputFile $testResultsFile -PassThru
        # (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path $testResultsFile))
        # if ($res.FailedCount -gt 0) {
        #     throw "$($res.FailedCount) tests failed."
        # }

#---------------------------------# 
#      deployment configuration   # 
#---------------------------------# 

# scripts to run before deployment 
deploy_script: 
  - ps: |
        # Correct duplicates in psmodulepath
        foreach($path in ($env:psmodulepath.split(';').ToUpper().ToLower() | Select-Object -Unique))
        {
          $fixpath += "$path;"
        }
        $env:psmodulepath = $fixpath
        
        # Load module data and create array of objects containing prerequisite details
        # TODO - test when a version is specified
        $requiredModules = @()
        $moduleInformation = Import-PowerShellDataFile -Path $(".\" + $env:APPVEYOR_PROJECT_NAME + ".psd1")
        foreach($prereqModule in $moduleInformation.RequiredModules[0]) {
          if ($galleryReference = Invoke-RestMethod -Method Get -Uri "https://www.powershellgallery.com/api/v2/FindPackagesById()?id='$prereqModule'" -ErrorAction Continue)
          {
            $moduleReference = New-Object -TypeName PSObject
            $moduleReference | Add-Member -MemberType NoteProperty -Name 'Name' -Value $prereqModule
            $moduleReference | Add-Member -MemberType NoteProperty -Name 'URI' -Value $galleryReference[$galleryReference.count-1].content.src
            $requiredModules += $moduleReference

            Install-Module -Name $prereqModule -force
          } 
        }
        
        Import-Module -Name $(".\" + $env:APPVEYOR_PROJECT_NAME + ".psm1")

        $Configurations = Get-Command -Type Configuration
        foreach ($confToCompile in $Configurations) {
          Invoke-Expression $confToCompile.Name -OutPath .\MOF\$confToCompile.Name
        }
        
        $result = ls .\MOF -recurse
        write-host $result