#---------------------------------#
#      environment configuration  #
#---------------------------------#
version: 1.0.{build}.0
environment:
  ApplicationID:
    secure: IJBqnB6WjtDi3ej/zy2D70Ry1AvJOrlZK5BhSoqEdxNENd0CL9qdMJndbi6p+di3
  ApplicationPassword:
    secure: b8lT719n/ll0Bp5SloBvzw==
  TenantID:
    secure: J/my7xsOE9jewR0DDhD+EU5jeo5Bp83/nmIK8a8QI0QLoZXStCOtk1vUjVsKylW2
install:
  - git clone https://github.com/Microsoft/WindowsDNSServer.Config
  - git clone https://github.com/PowerShell/DscResource.Tests
  - git clone https://github.com/Microsoft/DscConfiguration.Tests
  - ps: |
        Import-Module -Name .\DscConfiguration.Tests\TestHelper.psm1 -Force
        Import-Module -Name .\DscConfiguration.Tests\AppVeyorRunner.psm1 -Force
        Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.205 -Force | Out-Null
        Install-Module -Name Pester -Repository PSGallery -Force
        Install-Module -Name AzureRM -Repository PSGallery -Force
        
#---------------------------------#
#      build configuration        #
#---------------------------------#

build: false

#---------------------------------#
#      test configuration         #
#---------------------------------#

test_script:
    - ps: |
        # Suppressing tests until configuration test helper is created
        # $testResultsFile = ".\TestsResults.xml"
        # $res = Invoke-Pester -OutputFormat NUnitXml -OutputFile $testResultsFile -PassThru
        # (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path $testResultsFile))
        # if ($res.FailedCount -gt 0) {
        #     throw "$($res.FailedCount) tests failed."
        # }

#---------------------------------# 
#      deployment configuration   # 
#---------------------------------# 

# scripts to run before deployment 
deploy_script: 
  - ps: |
        try 
        {
          # Fix module path if duplicates exist (TestHelper)
          Invoke-UniquePSModulePath
          
          # Discover required modules from manifest (TestHelper)
          $Modules = Get-RequiredGalleryModules -ManifestData (Import-PowerShellDataFile -Path ".\$env:APPVEYOR_PROJECT_NAME.psd1") -Install

          # Prep and Import Configuration module (TestHelper)
          Import-ModuleFromSource -Name $env:APPVEYOR_PROJECT_NAME
          $Configurations = Invoke-ConfigurationPrep -Module $env:APPVEYOR_PROJECT_NAME -Path "$env:TEMP\$env:APPVEYOR_PROJECT_ID"

          # Login to Azure using information stored in AppVeyor and create RG and AA (AppVeyorRunner)
          if (Invoke-AzureSPNLogin -ApplicationID $env:ApplicationID -ApplicationPassword $env:ApplicationPassword -TenantID $env:TenantID)
          {
            # Create Azure Resource Group and Automation account
            New-ResourceGroupForTests

            # Import the modules discovered as requirements to Azure Automation (AppVeyorRunner)
            Import-ModulesToAzureAutomation -Modules $Modules

            # Import and compile the Configurations using Azure Automation (AppVeyorRunner)
            foreach ($Configuration in $Configurations)
            {
              Import-ConfigurationToAzureAutomation -Configuration $Configuration
            }
          }
        }
        Catch
        {
            throw $error
        }
        
        
        <#
        TODO - Deploy
          $DeployParams = @{
            ResourceGroupName     = $env:APPVEYOR_BUILD_ID
            Name                  = $Configuration.Name
            TemplateFile          = '.\Tests\Deployment\azuredeploy.json'
            TemplateParameterFile = '.\Tests\Deployment\azuredeploy.parameters.json'
          }
        $IaaSDeployment = New-AzureRMResourceGroupDeployment @DeployParams
        #>
        
        # TODO - standardize approach to deploying ARM template from repo handing off config name as param        
        # TODO - MVP is single VM, complete is multiple VM solution
        # TODO - tests from demo_ci
        
        $count = 0
        while ($count -le 20)
        {
          $count++
          start-sleep -seconds 60
          write-host $count
        }

        Remove-AzureRmResourceGroup -Name $env:APPVEYOR_BUILD_ID -Force
