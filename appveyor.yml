#---------------------------------#
#      environment configuration  #
#---------------------------------#
version: 1.0.{build}.0
environment:
  AppID:
    secure: IJBqnB6WjtDi3ej/zy2D70Ry1AvJOrlZK5BhSoqEdxNENd0CL9qdMJndbi6p+di3
  AppPass:
    secure: b8lT719n/ll0Bp5SloBvzw==
  Tenant:
    secure: J/my7xsOE9jewR0DDhD+EU5jeo5Bp83/nmIK8a8QI0QLoZXStCOtk1vUjVsKylW2
install:
  - git clone https://github.com/Microsoft/WindowsDNSServer.Config
  - git clone https://github.com/PowerShell/DscResource.Tests
  - ps: |
        Import-Module -Name .\DscResource.Tests\TestHelper.psm1 -Force
        Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.205 -Force | Out-Null
        Install-Module -Name Pester -Repository PSGallery -Force
        Install-Module -Name AzureRM -Repository PSGallery -Force
        
#---------------------------------#
#      build configuration        #
#---------------------------------#

build: false

#---------------------------------#
#      test configuration         #
#---------------------------------#

test_script:
    - ps: |
        # Suppressing tests until configuration test helper is created
        # $testResultsFile = ".\TestsResults.xml"
        # $res = Invoke-Pester -OutputFormat NUnitXml -OutputFile $testResultsFile -PassThru
        # (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path $testResultsFile))
        # if ($res.FailedCount -gt 0) {
        #     throw "$($res.FailedCount) tests failed."
        # }

#---------------------------------# 
#      deployment configuration   # 
#---------------------------------# 

# scripts to run before deployment 
deploy_script: 
  - ps: |
        # Correct duplicates in AppVeyor environment psmodulepath
        foreach($path in $env:psmodulepath.split(';').ToUpper().ToLower())
        {
          [array]$correctDirFormat += "$path\;"
        }
        $correctDirFormat = $correctDirFormat.replace("\\","\") | ? {$_ -ne '\;'} | Select-Object -Unique
        foreach ($path in $correctDirFormat.split(';'))
        {
          [string]$fixPath += "$path;"
        }
        $env:psmodulepath = $fixpath.replace(';;',';')
        
        # Load module data and create array of objects containing prerequisite details
        # TODO - test when a version is specified
        $requiredModules = @()
        $moduleInformation = Import-PowerShellDataFile -Path $(".\" + $env:APPVEYOR_PROJECT_NAME + ".psd1")
        foreach($prereqModule in $moduleInformation.RequiredModules[0]) {
          if ($galleryReference = Invoke-RestMethod -Method Get -Uri "https://www.powershellgallery.com/api/v2/FindPackagesById()?id='$prereqModule'" -ErrorAction Continue)
          {
            $moduleReference = New-Object -TypeName PSObject
            $moduleReference | Add-Member -MemberType NoteProperty -Name 'Name' -Value $prereqModule
            $moduleReference | Add-Member -MemberType NoteProperty -Name 'URI' -Value $galleryReference[$galleryReference.count-1].content.src
            $requiredModules += $moduleReference

            Install-Module -Name $prereqModule -force
          } 
        }
        
        # Import required DSC resources
        Import-Module -Name $(".\" + $env:APPVEYOR_PROJECT_NAME + ".psm1")

        # Log in to Azure
        $loc = 'eastus2'
        $creds = New-Object -typename System.Management.Automation.PSCredential -argumentlist $env:AppID, $(convertto-securestring -String $env:AppPass -AsPlainText -Force)
        
        # Suppress request to share usage information
        if (!(Resolve-Path -Path 'C:\Users\appveyor\AppData\Roaming\Windows Azure Powershell\' -ErrorAction SilentlyContinue))
        {
          mkdir 'C:\Users\appveyor\AppData\Roaming\Windows Azure Powershell\' | Out-Null
        }
        Set-Content -Value '{"enableAzureDataCollection":true}' -Path 'C:\Users\appveyor\AppData\Roaming\Windows Azure Powershell\AzureDataCollectionProfile.json' | Out-Null
        
        Add-AzureRmAccount -Credential $creds -ServicePrincipal -TenantId $env:Tenant | Out-Null
        
        # Create Resource Group
        if (!(Get-AzureRmResourceGroup -Name $env:APPVEYOR_PROJECT_NAME -ErrorAction SilentlyContinue))
        {
            New-AzureRmResourceGroup -Name $env:APPVEYOR_PROJECT_NAME -Location $loc | Out-Null
        }
        
        # Create Azure Automation account
        if (!(Get-AzureRMAutomationAccount -ResourceGroupName $env:APPVEYOR_PROJECT_NAME -Name $env:APPVEYOR_PROJECT_ID -ErrorAction SilentlyContinue))
        {
          New-AzureRMAutomationAccount -ResourceGroupName $env:APPVEYOR_PROJECT_NAME -Name $env:APPVEYOR_PROJECT_ID -Location $loc | Out-Null
        }

        # Upload required DSC resources
        foreach($automationModuleToUpload in $requiredModules) {
          # TODO check if module/version already has been published
          New-AzureRMAutomationModule -ResourceGroupName $env:APPVEYOR_PROJECT_NAME -AutomationAccountName $env:APPVEYOR_PROJECT_ID -Name $automationModuleToUpload.Name -ContentLink $automationModuleToUpload.URI | Out-Null 
        }

        # TROUBLESHOOTING THIS SECTION

        # Discover configurations from module
        $Configurations = Get-Command -Type Configuration
        
        # TODO - creater array of objects to manage compiled configs?
        # TODO - handle configdata in a more organized fashion?
        # TODO - handle no configdata
        # TODO - how to test compile if using assets?

        foreach ($confToCompile in $Configurations) {
          # Compile configurations
          $confToCompileName = $confToCompile.Name
          $confConfigData = Import-PowerShellDataFile ".\ConfigurationData\$confToCompileName.ConfigData.psd1" -ErrorAction SilentlyContinue
          if (Invoke-Expression "$confToCompileName -OutputPath .\MOF\$confToCompileName -ConfigurationData .\ConfigurationData\$confToCompileName.ConfigData.psd1")
          {
            mkdir 'C:\projects\windowsdnsserver-config\Meta\'
            $metaConfig = Get-AzureRmAutomationDscOnboardingMetaconfig -ResourceGroupName $env:APPVEYOR_PROJECT_NAME -AutomationAccountName $env:APPVEYOR_PROJECT_ID -ComputerName 'Test' -OutputFolder 'C:\projects\windowsdnsserver-config\Meta\' -Force | Out-Null
            Start-AzureRmAutomationDscCompilationJob -ResourceGroupName $env:APPVEYOR_PROJECT_NAME -AutomationAccountName $env:APPVEYOR_PROJECT_ID -ConfigurationName $confToCompileName -ConfigurationData $confConfigData
          }
        }

        # Import-AzureRMAutomationDSCNodeConfiguration -ResourceGroupName $env:APPVEYOR_PROJECT_NAME -AutomationAccountName $env:APPVEYOR_PROJECT_ID -Path '.\MOF\WindowsDNSServer\localhost.mof' -ConfigurationName 'WindowsDNSServer' -Force | Out-Null

        # TODO - standardize approach to deploying ARM template from repo handing off config name as param        
        # TODO - MVP is single VM, complete is multiple VM solution
        # TODO - tests from demo_ci
        
        # Start-Sleep -Seconds 900
        # Remove-AzureRmResourceGroup -Name $env:APPVEYOR_PROJECT_NAME -Force
