#---------------------------------#
#      environment configuration  #
#---------------------------------#
version: 1.0.{build}.0
environment:
  AppID:
    secure: IJBqnB6WjtDi3ej/zy2D70Ry1AvJOrlZK5BhSoqEdxNENd0CL9qdMJndbi6p+di3
  AppPass:
    secure: b8lT719n/ll0Bp5SloBvzw==
  Tenant:
    secure: J/my7xsOE9jewR0DDhD+EU5jeo5Bp83/nmIK8a8QI0QLoZXStCOtk1vUjVsKylW2
install:
  - git clone https://github.com/Microsoft/WindowsDNSServer.Config
  - git clone https://github.com/PowerShell/DscResource.Tests
  - ps: |
        Import-Module -Name .\DscResource.Tests\TestHelper.psm1 -Force
        Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.205 -Force | Out-Null
        Install-Module -Name Pester -Repository PSGallery -Force
        Install-Module -Name AzureRM -Repository PSGallery -Force

#---------------------------------#
#      build configuration        #
#---------------------------------#

build: false

#---------------------------------#
#      test configuration         #
#---------------------------------#

test_script:
    - ps: |
        # Suppressing tests until configuration test helper is created
        # $testResultsFile = ".\TestsResults.xml"
        # $res = Invoke-Pester -OutputFormat NUnitXml -OutputFile $testResultsFile -PassThru
        # (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path $testResultsFile))
        # if ($res.FailedCount -gt 0) {
        #     throw "$($res.FailedCount) tests failed."
        # }

#---------------------------------# 
#      deployment configuration   # 
#---------------------------------# 

# scripts to run before deployment 
deploy_script: 
  - ps: |
        $loc = 'eastus2'
        $creds = New-Object -typename System.Management.Automation.PSCredential -argumentlist $env:AppID, $(convertto-securestring -String $env:AppPass -AsPlainText -Force)
        if (!(Resolve-Path -Path 'C:\Users\appveyor\AppData\Roaming\Windows Azure Powershell\' -ErrorAction SilentlyContinue))
        {
          mkdir 'C:\Users\appveyor\AppData\Roaming\Windows Azure Powershell\'
        }
        Set-Content -Value '{"enableAzureDataCollection":true}' -Path 'C:\Users\appveyor\AppData\Roaming\Windows Azure Powershell\AzureDataCollectionProfile.json'
        Add-AzureRmAccount -Credential $creds -ServicePrincipal -TenantId $env:Tenant | Out-Null
        if (!(Get-AzureRmResourceGroup -Name $env:APPVEYOR_PROJECT_NAME -ErrorAction SilentlyContinue))
        {
            New-AzureRmResourceGroup -Name $env:APPVEYOR_PROJECT_NAME -Location $loc
        }
        if (!(Get-AzureRMAutomationAccount -ResourceGroupName $env:APPVEYOR_PROJECT_NAME -Name $env:APPVEYOR_PROJECT_ID -ErrorAction SilentlyContinue))
        {
          New-AzureRMAutomationAccount -ResourceGroupName $env:APPVEYOR_PROJECT_NAME -Name $env:APPVEYOR_PROJECT_ID -Location $loc
        }

        # look up prereqs
        $moduleInformation = Import-PowerShellDataFile $(".\" + $env:APPVEYOR_PROJECT_NAME + ".psd1")
        # todo - most recent if not specific
        $moduleInformation.RequiredModules
        foreach($prereqModule in $moduleInformation.RequiredModules[0]) {
          # get URL and publish to AADSC
          $galleryReference = Invoke-RestMethod -Method Get -Uri "https://www.powershellgallery.com/api/v2/FindPackagesById()?id='$prereqModule'" -ErrorAction Continue
          Write-Host "$prereqModule gallery URI = $($galleryReference[$galleryReference.count-1].content.src)"
          if ($galleryReference)
          {
            New-AzureRMAutomationModule -ResourceGroupName $env:APPVEYOR_PROJECT_NAME -AutomationAccountName $env:APPVEYOR_PROJECT_ID -Name $prereqModule -ContentLink $galleryReference[$galleryReference.count-1].content.src -verbose
          } 
        }
        
        # todo - install to build node using nuget (use testhelper)
        # todo - compile configs
        # todo - this needs to happen early, and fail the entire script if any config does not compile
        # todo - if mof, upload artifact to AADSC and AppVeyor, maybe also to GitHub?

        # todo - tests from demo_ci
        Start-Sleep -Seconds 300
        Remove-AzureRmResourceGroup -Name $env:APPVEYOR_PROJECT_NAME -Force
